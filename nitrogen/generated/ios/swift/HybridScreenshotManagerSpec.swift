///
/// HybridScreenshotManagerSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridScreenshotManagerSpec``
public protocol HybridScreenshotManagerSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func enabled(value: Bool) throws -> Void
  func addListener(listener: @escaping () -> Void) throws -> () -> Void
}

/// See ``HybridScreenshotManagerSpec``
public class HybridScreenshotManagerSpec_base {
  private weak var cxxWrapper: HybridScreenshotManagerSpec_cxx? = nil
  public func getCxxWrapper() -> HybridScreenshotManagerSpec_cxx {
  #if DEBUG
    guard self is HybridScreenshotManagerSpec else {
      fatalError("`self` is not a `HybridScreenshotManagerSpec`! Did you accidentally inherit from `HybridScreenshotManagerSpec_base` instead of `HybridScreenshotManagerSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridScreenshotManagerSpec_cxx(self as! HybridScreenshotManagerSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the ScreenshotManager HybridObject.
 * Implement this protocol to create Swift-based instances of ScreenshotManager.
 * ```swift
 * class HybridScreenshotManager : HybridScreenshotManagerSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridScreenshotManagerSpec = HybridScreenshotManagerSpec_protocol & HybridScreenshotManagerSpec_base
