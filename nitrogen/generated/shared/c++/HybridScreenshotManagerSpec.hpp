///
/// HybridScreenshotManagerSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>
#include <string>
#include <functional>

namespace margelo::nitro::screenshotmanager {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `ScreenshotManager`
   * Inherit this class to create instances of `HybridScreenshotManagerSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridScreenshotManager: public HybridScreenshotManagerSpec {
   * public:
   *   HybridScreenshotManager(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridScreenshotManagerSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridScreenshotManagerSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridScreenshotManagerSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual void enabled(bool value) = 0;
      virtual void enableSecureView(const std::optional<std::string>& imagePath) = 0;
      virtual void disableSecureView() = 0;
      virtual std::function<void()> addListener(const std::function<void()>& listener) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "ScreenshotManager";
  };

} // namespace margelo::nitro::screenshotmanager
