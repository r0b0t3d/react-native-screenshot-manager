///
/// JHybridScreenshotManagerSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridScreenshotManagerSpec.hpp"



#include <functional>
#include "JFunc_void.hpp"

namespace margelo::nitro::screenshotmanager {

  jni::local_ref<JHybridScreenshotManagerSpec::jhybriddata> JHybridScreenshotManagerSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridScreenshotManagerSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridScreenshotManagerSpec::initHybrid),
    });
  }

  size_t JHybridScreenshotManagerSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  void JHybridScreenshotManagerSpec::enabled(bool value) {
    static const auto method = javaClassStatic()->getMethod<void(jboolean /* value */)>("enabled");
    method(_javaPart, value);
  }
  std::function<void()> JHybridScreenshotManagerSpec::addListener(const std::function<void()>& listener) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JFunc_void::javaobject>(jni::alias_ref<JFunc_void::javaobject> /* listener */)>("addListener_cxx");
    auto __result = method(_javaPart, JFunc_void_cxx::fromCpp(listener));
    return [&]() -> std::function<void()> {
      if (__result->isInstanceOf(JFunc_void_cxx::javaClassStatic())) [[likely]] {
        auto downcast = jni::static_ref_cast<JFunc_void_cxx::javaobject>(__result);
        return downcast->cthis()->getFunction();
      } else {
        return [__result]() -> void {
          return __result->invoke();
        };
      }
    }();
  }

} // namespace margelo::nitro::screenshotmanager
